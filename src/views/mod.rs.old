use ::phi::{Phi, View, ViewAction};
use ::sdl2::pixels::Color;

pub struct DefaultView;

impl View for DefaultView {
    fn resume(&mut self, _: &mut Phi) {
        
    }

    fn pause(&mut self, _: &mut Phi) {
        
    }

    fn render(&mut self, context: &mut Phi, _: f64) -> ViewAction {
        let renderer = &mut context.renderer;
        let events = &mut context.events;

        if events.now.quit || events.now.key_escape == Some(true) {
            return ViewAction::Quit;
        }

        renderer.set_draw_color(Color::RGB(0, 0, 0));
        renderer.clear();
        ViewAction::None
    }
}

pub struct ViewA;
pub struct ViewB;

impl View for ViewA {
    fn resume(&mut self, context: &mut Phi) {
        context.renderer.set_draw_color(Color::RGB(0, 255, 0));
    }
    fn render(&mut self, context: &mut Phi, _: f64) -> ViewAction {
        let events = &context.events;
        let renderer = &mut context.renderer;
        if events.now.quit || events.now.key_escape == Some(true) {
            ViewAction::Quit
        } else if events.now.key_space == Some(true) {
            ViewAction::ChangeView(Box::new(ViewB))
        } else {
            renderer.clear();
            ViewAction::None
        }
    }
}

impl View for ViewB {
    fn resume(&mut self, context: &mut Phi) {
        context.renderer.set_draw_color(Color::RGB(0, 0, 255));
    }
    fn render(&mut self, context: &mut Phi, _: f64) -> ViewAction {
        let events = &context.events;
        let renderer = &mut context.renderer;
        if events.now.quit || events.now.key_escape == Some(true) {
            ViewAction::Quit
        } else if events.now.key_space == Some(true) {
            ViewAction::ChangeView(Box::new(ViewA))
        } else {
            renderer.clear();
            ViewAction::None
        }
    }
}

